#!/usr/bin/env perl
# @author Robin Schneider <ypid23@aol.de>
# @licence GPLv3 <http://www.gnu.org/licenses/gpl.html>
# Convert all school holidays from schulferien.org (provided as ical) to a
# definition which can be used inside the JavaScript library.
use strict;
use warnings;
use autodie;
use feature qw(say);
use utf8;
use open qw(:std :utf8);
binmode STDOUT, ':encoding(UTF-8)';

my $ical_overview_url = 'http://www.schulferien.org/iCal/';
my $tmp_dir_icals = '/tmp/school_holiday_icals/';
my @only_states = ( 'Baden-Württemberg', 'Bayern' );

use Data::ICal;
use Data::ICal::DateTime;
use DateTime;
use Data::Dumper::Simple;
use WWW::Mechanize;
use File::Path qw(make_path);

my $mech = WWW::Mechanize->new();

# get the list of available school holidays {{{
$mech->get( $ical_overview_url );
my @ical_urls;
for my $link ( $mech->links() ) {
    my $attrs    = $link->attrs();
    my $base     = $link->base();
    my $filepath = $link->url();
    if ($filepath =~ /\.ics\Z/xms
            && $attrs->{onmouseover} =~ /\('iCal\sSchulferien\s\d{4}\s(?<state_name>[^']*)'\)/xms) {
        push(@ical_urls, [ $filepath, $+{state_name} ]);
    }
}
# }}}

make_path $tmp_dir_icals;
my %only_states = map { $_ => 1 } @only_states;

# my @ical_urls = (
#     # [
#     #  'Ferien/icals/Ferien_Baden_Wuerttemberg_2012.ics',
#     #  "Baden-W\x{fc}rttemberg"
#     # ],
#     [
#      'Ferien/icals/Ferien_Baden_Wuerttemberg_2013.ics',
#      "Baden-W\x{fc}rttemberg"
#     ],
#     [
#      'Ferien/icals/Ferien_Baden_Wuerttemberg_2014.ics',
#      "Baden-W\x{fc}rttemberg"
#     ],
#     [
#      'Ferien/icals/Ferien_Baden_Wuerttemberg_2015.ics',
#      "Baden-W\x{fc}rttemberg"
#     ],
#     # [
#     #  'Ferien/icals/Ferien_Bayern_2012.ics',
#     #  'Bayern'
#     # ],
#     [
#      'Ferien/icals/Ferien_Bayern_2013.ics',
#      'Bayern'
#     ],
#     [
#      'Ferien/icals/Ferien_Bayern_2014.ics',
#      'Bayern'
#     ],
# );
# say Dumper @ical_urls;

my @result;
my %final;

FILE:
for my $link_arr (@ical_urls) {
    my $filename   = $link_arr->[0];
    my $state_name = $link_arr->[1];
    unless ($only_states{$state_name}) {
        next FILE;
    }

    $filename =~ /\AFerien\/icals\/Ferien_(?<state>[\w_-]+)_(?<year>\d{4})\.ics\Z/xms
        or die 'Could not get year';
    # $+{state} is the save version (without Unicode characters)
    my $curr_ical_file = $tmp_dir_icals . $+{state} . '_' . $+{year} . '.ics';

    unless (-e $curr_ical_file) {
        $mech->get( $ical_overview_url . $filename, ':content_file' => $curr_ical_file );
    }

    my $cal = Data::ICal->new(filename => $curr_ical_file);
    my @events = $cal->events();
    my @last;

    my $pos = -1;
    HOLIDAY: # ical is actually sorted, don’t know why this is unsorted but I rely on it
    foreach my $event (sort { $a->start cmp $b->start} @events) {
        $pos++;
        my @print_arr;
        my @date_range;

        my $ends_next_year = $event->start->year != $event->end->year;
        my $holiday_name   = $event->property('summary')->[0]->value;
        $holiday_name =~ s/ [\w_-]+\z//ms; # remove state name

        @date_range = ($event->start->month, $event->start->day);
        push(@date_range, $event->end->month, $event->end->day, { pos => $pos });

        if (defined $final{$state_name}) {
            for my $holiday (@{$final{$state_name}}) {
                if ($holiday->{name} eq $holiday_name) {

                    if ($event->start->month == 1 and $event->start->day == 1) {
                        if (defined $holiday->{$event->start->year - 1}
                                and $pos == 0) {
                            # this is the part spanning the year # 2013: [ 1, 1, 1, 5 ],
                            # Modify last year …
                            $holiday->{$event->start->year - 1}->[2] = $event->end->month;
                            $holiday->{$event->start->year - 1}->[3] = $event->end->day;
                            next HOLIDAY;
                        }
                    }

                    die 'fail' if (defined $holiday->{$event->start->year});
                    # year already existing?

                    $holiday->{$event->start->year} = \@date_range;
                    next HOLIDAY;
                }
            }
        }

        # this part is spanning the year # 2013: [ 1, 1, 1, 5 ],
        if ($event->start->month == 1 and $event->start->day == 1 and $pos == 0) {
                # There is no previous year ignore this holiday.
                next HOLIDAY;
        }

        if (defined $final{$state_name}) {
            push($final{$state_name}, { name => $holiday_name, $event->start->year => [ @date_range ], pos => $pos });
        } else {
            $final{$state_name} = [ { name => $holiday_name, $event->start->year => [ @date_range ], pos => $pos } ];
        }
    }
}


# say Dumper @result;
for my $state_name (keys %final) {
    my $indent_level = 0;
    say q( ) x $indent_level . qq('$state_name': {);
    $indent_level += 4;
    say q( ) x $indent_level . qq('SH': [);

    $indent_level += 4;
    for my $holiday (sort {$a->{pos} cmp $b->{pos}} @{$final{$state_name}}) {
        say q( ) x $indent_level . '{';
        say q( ) x $indent_level . qq(    name: '$holiday->{name}',);
        $indent_level += 4;
        for my $year (sort keys $holiday) {
            if ($year ne 'name' and $year ne 'pos') {
                my @date_range = @{$holiday->{$year}};
                say q( ) x $indent_level . $year . ': [ '
                    . join(', ', map { sprintf('%2d', $_) } @date_range[0,1]) . ', /* to */ '
                    . join(', ', map { sprintf('%2d', $_) } @date_range[2,3]).' ],';
            }
        }
        $indent_level -= 4;
        say q( ) x $indent_level . qq(},);
    }
    $indent_level -= 4;
    say q( ) x $indent_level . qq(],);
    $indent_level -= 4;
    say q( ) x $indent_level . qq(},);
}
